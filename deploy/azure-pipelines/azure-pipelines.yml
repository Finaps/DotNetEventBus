# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pool:
  vmImage: 'ubuntu-16.04'

# these variables are available throughout the build file
# just the build configuration is defined, in this case we are building Release packages
variables:
  buildConfiguration: 'Release'
  unitTestsProjPath: 'EventBus.UnitTests/EventBus.UnitTests.csproj'
  majorVersion : 0
  minorVersion: 1
  patchVersion: $[counter(variables['minorVersion'], 0)]

#The build has 4 seperate tasks run under 1 step
steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    # versioningScheme: 'byPrereleaseNumber'
    # majorVersion: '$(majorVersion)' # Required when versioningScheme == ByPrereleaseNumber
    # minorVersion: '$(minorVersion)' # Required when versioningScheme == ByPrereleaseNumber
    # patchVersion: '$(patchVersion)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    arguments: '$(unitTestsProjPath) --configuration $(buildConfiguration)'
    
# The second task is dotnet pack command again pointing to the csproj file
# The nobuild means the project will not be compiled before running pack, because its already built in above step
- task: DotNetCoreCLI@2
  displayName: "dotnet pack"
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: 'pack'
    # versioningScheme: 'byPrereleaseNumber'
    # majorVersion: '$(majorVersion)' # Required when versioningScheme == ByPrereleaseNumber
    # minorVersion: '$(minorVersion)' # Required when versioningScheme == ByPrereleaseNumber
    # patchVersion: '$(patchVersion)'
    arguments: '--configuration $(buildConfiguration)'
    nobuild: true

# The last task is a nuget command, nuget push
# This will push any .nupkg files to the 'TestFeed' artifact feed
# allowPackageConflicts allows us to build the same version and not throw an error when trying to push
# instead it just ingores the latest package unless the version changes
- task: NuGetCommand@2
  displayName: 'nuget push'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: 'push'
    feedsToUse: 'select'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    # versioningScheme: 'byPrereleaseNumber'
    # majorVersion: '$(majorVersion)' # Required when versioningScheme == ByPrereleaseNumber
    # minorVersion: '$(minorVersion)' # Required when versioningScheme == ByPrereleaseNumber
    # patchVersion: '$(patchVersion)' # Required when versioningScheme == ByPrereleaseNumber
    includeNuGetOrg: true
    publishFeedCredentials: 'NugetCredentials'
    allowPackageConflicts: true
